#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–µ—Ä—à–∏—Ç–µ–ª—ñ —á–∞—Å—É - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É –≥—Ä–∏
–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É + –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤
"""

import os
import sys
import traceback
from pathlib import Path
from PyQt6.QtWidgets import QApplication

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø–æ–º–∏–ª–æ–∫
def setup_error_logging():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –≥–ª–æ–±–∞–ª—å–Ω—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫"""
    from –ª–æ–≥—É–≤–∞–Ω–Ω—è import game_logger
    
    def handle_exception(exc_type, exc_value, exc_traceback):
        """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
        if issubclass(exc_type, KeyboardInterrupt):
            sys.__excepthook__(exc_type, exc_value, exc_traceback)
            return
        
        error_msg = ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
        game_logger.error(f"–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {error_msg}")
        print(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {exc_value}")
        print("–î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–æ–º–∏–ª–∫–∏.log")
    
    sys.excepthook = handle_exception


def check_project_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É"""
    message = "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É..."
    print(message)
    
    base_path = Path(__file__).parent
    
    # –°–ø–∏—Å–æ–∫ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    required_files = [
        "–≥—Ä–∞.py",
        "–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.py",
        "–ª–æ–≥—É–≤–∞–Ω–Ω—è.py",
        "—Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è_—Ñ—ñ–≥—É—Ä.py",
        "—Å—Ç–∞–Ω_–≥—Ä–∏.py",
        "–¥–æ—à–∫–∞.py",
        "–ø—Ä–∞–≤–∏–ª–∞_—Ñ—ñ–≥—É—Ä.py",
        "–≥—Ä–∞—Ñ—ñ–∫–∞_–≥—Ä–∏.py",
        "–≥—Ä–∞—Ñ—ñ–∫–∞_—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.py",
        "—à—Ç—É—á–Ω–∏–π_—ñ–Ω—Ç–µ–ª–µ–∫—Ç/__init__.py",
        "—à—Ç—É—á–Ω–∏–π_—ñ–Ω—Ç–µ–ª–µ–∫—Ç/–∞–ª–≥–æ—Ä–∏—Ç–º.py",
        "—à—Ç—É—á–Ω–∏–π_—ñ–Ω—Ç–µ–ª–µ–∫—Ç/–æ—Ü—ñ–Ω–∫–∞.py",
    ]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤
    missing_files = []
    existing_files = 0
    
    for file_path in required_files:
        full_path = base_path / file_path
        if full_path.exists():
            existing_files += 1
        else:
            missing_files.append(file_path)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–≥—É—Ä
    figure_names = [
        "aristocrat.svg", "bishop.svg", "eye.svg", "fury.svg", "king.svg",
        "knight.svg", "lightning.svg", "moon.svg", "pawn.svg", "queen.svg", 
        "rider.svg", "rook.svg", "shield.svg", "temple.svg", "triumphator.svg"
    ]
    
    white_figures_path = base_path / "—Ä–µ—Å—É—Ä—Å–∏/–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è/—Ñ—ñ–≥—É—Ä–∏/–±—ñ–ª—ñ"
    black_figures_path = base_path / "—Ä–µ—Å—É—Ä—Å–∏/–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è/—Ñ—ñ–≥—É—Ä–∏/—á–æ—Ä–Ω—ñ"
    
    white_count = sum(1 for f in figure_names if (white_figures_path / f).exists())
    black_count = sum(1 for f in figure_names if (black_figures_path / f).exists())
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ª–æ–≥—ñ–≤
    log_dir = base_path / "–ª–æ–≥–∏"
    log_dir.mkdir(exist_ok=True)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ–Ω—ñ–≤
    backgrounds_path = base_path / "—Ä–µ—Å—É—Ä—Å–∏" / "–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" / "—Ñ–æ–Ω–∏"
    background_count = 0
    if backgrounds_path.exists():
        extensions = ['.jpg', '.jpeg', '.png', '.bmp']
        seen_names = set()
        for file_path in backgrounds_path.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in extensions:
                name_without_ext = file_path.stem
                if name_without_ext not in seen_names:
                    background_count += 1
                    seen_names.add(name_without_ext)
    
    # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    total_files = len(required_files)
    message1 = f"üìÅ –§–∞–π–ª–∏ –ø—Ä–æ–µ–∫—Ç—É: {existing_files}/{total_files}"
    print(message1)
    message2 = f"‚ôüÔ∏è  –§—ñ–≥—É—Ä–∏: {white_count}/15 –±—ñ–ª–∏—Ö, {black_count}/15 —á–æ—Ä–Ω–∏—Ö"
    print(message2)
    
    if missing_files:
        message3 = "‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏:"
        print(message3)
        for file in missing_files:
            message4 = f"   ‚ùå {file}"
            print(message4)
    
    if missing_files or white_count < 15 or black_count < 15:
        message5 = "‚ùå –î–µ—è–∫—ñ —Ñ–∞–π–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ü—Ä–æ–≥—Ä–∞–º–∞ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ."
        print(message5)
        return False
    
    message6 = "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É –ø–æ–≤–Ω–∞ —Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∞!"
    print(message6)
    if background_count > 0:
        message7 = f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ–Ω—ñ–≤: {background_count} —à—Ç."
        print(message7)
    
    return True


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –≥—Ä–∏"""
    import os
    # os.system('cls')  # –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω–∞–ª—É –¥–ª—è Windows
    
    try:
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
        setup_error_logging()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        if not check_project_structure():
            message = "üõë –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏."
            print(message)
            sys.exit(1)
        
        message = "üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∏..."
        print(message)
        
        # –ó–∞–ø—É—Å–∫ Qt –¥–æ–¥–∞—Ç–∫—É
        app = QApplication(sys.argv)
        app.setApplicationName("–í–µ—Ä—à–∏—Ç–µ–ª—ñ —á–∞—Å—É")
        app.setOrganizationName("TimeChess")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        from –≥—Ä–∞—Ñ—ñ–∫–∞_—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É import MainWindow
        window = MainWindow()
        window.showMaximized()
        
        # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
        sys.exit(app.exec())
        
    except Exception as e:
        from –ª–æ–≥—É–≤–∞–Ω–Ω—è import game_logger
        game_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≥—Ä–∏: {e}")
        game_logger.error(traceback.format_exc())
        print(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        print("–î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–æ–º–∏–ª–∫–∏.log")
        sys.exit(1)


if __name__ == "__main__":
    main()