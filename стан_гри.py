# -*- coding: utf-8 -*-
import datetime
from typing import List, Tuple, Optional
from –¥–æ—à–∫–∞ import Board
from —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è_—Ñ—ñ–≥—É—Ä import Piece, Move, get_initial_piece_positions
from –ø—Ä–∞–≤–∏–ª–∞_—Ñ—ñ–≥—É—Ä import MoveCalculator
from –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è import (
    PieceType, PieceColor,
    LETTERS_BOTTOM, NUMBERS_LEFT,
    PIECE_NAMES_UA, NEBULAS
)
from –ª–æ–≥—É–≤–∞–Ω–Ω—è import game_logger, game_print, log_error, end_game

def coordinates_to_chess_notation(row: int, col: int) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ —à–∞—Ö–æ–≤—É –Ω–æ—Ç–∞—Ü—ñ—é"""
    if 0 <= col - 1 < len(LETTERS_BOTTOM):
        letter = LETTERS_BOTTOM[col - 1]
    else:
        letter = chr(ord('A') + col - 1)
    
    # –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–º–µ—Ä —Ä—è–¥–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –Ω–æ—Ç–∞—Ü—ñ—ó
    chess_row = 21 - row
    return f"{letter}{chess_row}"

def get_color_name_ua(piece_color: PieceColor) -> str:
    return "–±—ñ–ª–∏–π" if piece_color == PieceColor.WHITE else "—á–æ—Ä–Ω–∏–π"

def get_color_name_ua_with_gender(piece_color: PieceColor, piece_type: PieceType) -> str:
    feminine_pieces = {PieceType.QUEEN, PieceType.ROOK, PieceType.FURY, PieceType.LIGHTNING}
    if piece_type in feminine_pieces:
        return "–±—ñ–ª–∞" if piece_color == PieceColor.WHITE else "—á–æ—Ä–Ω–∞"
    else:
        return "–±—ñ–ª–∏–π" if piece_color == PieceColor.WHITE else "—á–æ—Ä–Ω–∏–π"

def is_nebula_coordinates(row: int, col: int) -> bool:
    for nebula_name, (neb_row, neb_col) in NEBULAS.items():
        if neb_row == row and neb_col == col:
            return True
    return False

def get_nebula_name(row: int, col: int) -> Optional[str]:
    for nebula_name, (neb_row, neb_col) in NEBULAS.items():
        if neb_row == row and neb_col == col:
            return nebula_name
    return None

def get_nebula_emoji_name(nebula_name: str) -> str:
    nebula_names_ua = {
        "top_left": "–≤–µ—Ä—Ö–Ω—è –ª—ñ–≤–∞",
        "top_right": "–≤–µ—Ä—Ö–Ω—è –ø—Ä–∞–≤–∞", 
        "bottom_left": "–Ω–∏–∂–Ω—è –ª—ñ–≤–∞",
        "bottom_right": "–Ω–∏–∂–Ω—è –ø—Ä–∞–≤–∞"
    }
    return nebula_names_ua.get(nebula_name, nebula_name)

class GameState:
    def __init__(self):
        self.board = Board()
        self.current_player = PieceColor.WHITE
        self.turn_number = 1
        self.selected_piece = None
        self.possible_moves = []
        self.possible_attacks = []
        self.possible_teleports = []
        
        self.move_calculator = MoveCalculator(self.board)
        self.move_calculator.set_game_state(self)
        
        self.move_history = []
        self.captured_pieces = {"white": [], "black": []}
        
        self.paralysis_selection = None  # {'triumphator_pos': (r,c), 'target_pos': (r,c)}
        self.paralyzed_pieces = {}  # {(row, col): {'duration': int, 'piece_id': int}}
        self.moon_double_move = None
        
        self.nebula_blocked = {
            "top_left": True,
            "top_right": True, 
            "bottom_left": True,
            "bottom_right": True
        }
        
        self.resurrected_pawns = {"white": 0, "black": 0}
        self.resurrection_available = {"white": 0, "black": 0}
        self.nebulas_activated = {"white": False, "black": False}
        self.nebula_piece_timers = {}
        self.recently_resurrected_pieces = set()

        # Eye enhancement attributes
        self.eye_enhancement_used = {"white": False, "black": False}
        self.triumphant_eye_links = {}
        self.eye_enhancement_selection = None
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—é–≤–∞–Ω–Ω—è –Ω–∞ –¥—É—à—ñ –í—Å–∞–¥–Ω–∏–∫–æ–º
        self.hunted_souls = {
            "white": {PieceType.KNIGHT: False, PieceType.BISHOP: False, PieceType.RIDER: False},
            "black": {PieceType.KNIGHT: False, PieceType.BISHOP: False, PieceType.RIDER: False}
        }
        self.performed_resurrection = {"white": False, "black": False}  # –û–¥–Ω–µ –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è –≤—Å–∞–¥–Ω–∏–∫–æ–º –Ω–∞ –≤—Å—é –≥—Ä—É (–ù–ê–ó–ê–í–ñ–î–Ü)
        self.soul_corners = []  # –°–ø–∏—Å–æ–∫ –∫—É—Ç–æ—á–∫—ñ–≤ –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è: [(row, col, piece_type, is_green, player_color)]
        
        # –°–∏—Å—Ç–µ–º–∞ –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞ - –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–∏–π –æ–±–º—ñ–Ω
        self.aristocrat_exchanges = []  # –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –æ–±–º—ñ–Ω—ñ–≤: [(row, col)]
        
        # –°–∏—Å—Ç–µ–º–∞ –ú—ñ—Å—è—Ü—è - –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥
        self.moon_double_move_active = {"white": False, "black": False}  # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É
        self.moon_double_move_used = {"white": False, "black": False}  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É (–æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –≥—Ä—É)
        self.moon_double_move_first_piece = None  # ID —Ñ—ñ–≥—É—Ä–∏, —â–æ –∑—Ä–æ–±–∏–ª–∞ –ø–µ—Ä—à–∏–π —Ö—ñ–¥
        
        # –°–∏—Å—Ç–µ–º–∞ –•—Ä–∞–º—É - —Å–≤—è—â–µ–Ω–Ω–∏–π –æ–±–º—ñ–Ω
        self.temple_swap_used = {
            "black_left": False,    # –•—Ä–∞–º –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (1, 1) - ID 2000
            "black_right": False,   # –•—Ä–∞–º –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (1, 18) - ID 2017
            "white_left": False,    # –•—Ä–∞–º –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (20, 1) - ID 1030
            "white_right": False    # –•—Ä–∞–º –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (20, 18) - ID 1047
        }
        self.temple_swap_selection = None  # {'temple_pos': (r,c), 'temple_id': str}
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
        self.game_over = False
        self.winner = None  # 'white', 'black', –∞–±–æ 'draw' (–¥–ª—è –ø–∞—Ç—É)
        self.game_over_reason = None  # 'checkmate', 'stalemate', —Ç–æ—â–æ
        
        self._setup_initial_position()
    
    def _setup_initial_position(self):
        initial_positions = get_initial_piece_positions()
        for row, col, piece_type, piece_color, piece_id in initial_positions:
            if 1 <= row <= 20 and 1 <= col <= 18:
                piece = Piece(piece_type, piece_color, piece_id)
                self.board.set_piece(row, col, piece)
        
        # Setup Triumphant-Eye links
        self.triumphant_eye_links = {
            1004: [1000, 1001],
            1005: [1002, 1003],
            2036: [2042, 2043],
            2037: [2044, 2045],
        }

    def get_piece_at(self, row: int, col: int) -> Optional[Piece]:
        piece = self.board.get_piece_at(row, col)
        if piece and not piece.is_empty():
            return piece
        return None
    
    def is_nebula_blocked(self, row: int, col: int) -> bool:
        for nebula_name, (nebula_row, nebula_col) in NEBULAS.items():
            if nebula_row == row and nebula_col == col:
                return self.nebula_blocked.get(nebula_name, False)
        return False
    
    def unlock_nebula(self, nebula_name: str):
        if nebula_name in self.nebula_blocked:
            self.nebula_blocked[nebula_name] = False
    
    def get_nebula_ring_color(self, row: int, col: int, current_player_color: PieceColor) -> Optional[PieceColor]:
        if self.is_nebula_blocked(row, col):
            return PieceColor.BLACK if current_player_color == PieceColor.WHITE else PieceColor.WHITE
        return None
    
    def select_piece(self, row: int, col: int) -> bool:
        if self.paralysis_selection:
            return self._handle_paralysis_landing_selection(row, col)

        # Eye enhancement —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ –≥—Ä–∞—Ñ—ñ–∫–∞_—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.py —á–µ—Ä–µ–∑ _handle_enhancement_click()
        # –¢—É—Ç –º–∏ –ø—Ä–æ—Å—Ç–æ –±–ª–æ–∫—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –≤–∏–±—ñ—Ä —Ñ—ñ–≥—É—Ä –ø—ñ–¥ —á–∞—Å –ø–æ—Å–∏–ª–µ–Ω–Ω—è
        if self.eye_enhancement_selection:
            return False

        if (row, col) in self.paralyzed_pieces:
            game_print("‚ùå –¶—è —Ñ—ñ–≥—É—Ä–∞ –ø–∞—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
            return False

        piece = self.get_piece_at(row, col)
            
        if piece is None or piece.color != self.current_player:
            self.clear_selection()
            # –û—á–∏—â–∞—î–º–æ –≤–∏–±—ñ—Ä –•—Ä–∞–º—É, —è–∫—â–æ –∫–ª—ñ–∫–∞—î–º–æ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—é –∫–ª—ñ—Ç–∏–Ω–∫—É –∞–±–æ –≤–æ—Ä–æ–∂—É —Ñ—ñ–≥—É—Ä—É
            self.temple_swap_selection = None
            return False
        
        # –Ø–∫—â–æ –≤–∏–±–∏—Ä–∞—î–º–æ –Ω–µ –•—Ä–∞–º, –æ—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä –æ–±–º—ñ–Ω—É
        if piece.type != PieceType.TEMPLE:
            self.temple_swap_selection = None
        
        if piece.id in self.recently_resurrected_pieces:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É –ú—ñ—Å—è—Ü—è
        color_key = "white" if piece.color == PieceColor.WHITE else "black"
        if self.moon_double_move_active[color_key]:
            if self.moon_double_move_first_piece is not None:
                # –î—Ä—É–≥–∏–π —Ö—ñ–¥ - –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ú—ñ—Å—è—Ü—å
                if piece.type != PieceType.MOON:
                    game_print("üåô –ü—ñ–¥ —á–∞—Å –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ú—ñ—Å—è—Ü—å!")
                    return False
        
        supported_pieces = [
            PieceType.PAWN, PieceType.ROOK, PieceType.KNIGHT, 
            PieceType.BISHOP, PieceType.QUEEN, PieceType.KING,
            PieceType.SHIELD, PieceType.FURY, PieceType.TEMPLE,
            PieceType.ARISTOCRAT, PieceType.RIDER, PieceType.MOON,
            PieceType.LIGHTNING, PieceType.TRIUMPHATOR, PieceType.EYE
        ]
        
        if piece.type not in supported_pieces:
            return False
        
        self.selected_piece = (row, col)
        self.possible_moves, self.possible_attacks, self.possible_teleports = self.move_calculator.get_possible_moves(piece, row, col)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –•—Ä–∞–º—É - –ø–æ–∫–∞–∑—É—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–≤—è—â–µ–Ω–Ω–æ–≥–æ –æ–±–º—ñ–Ω—É
        if piece.type == PieceType.TEMPLE:
            temple_id = self.get_temple_id(row, col)
            if temple_id and not self.temple_swap_used.get(temple_id, False):
                # –•—Ä–∞–º —â–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ —Å–≤—ñ–π –æ–±–º—ñ–Ω
                self.temple_swap_selection = {
                    'temple_pos': (row, col),
                    'temple_id': temple_id
                }
                # –ú–æ–∂–ª–∏–≤—ñ –æ–±–º—ñ–Ω–∏ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ —è–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫—Ä–∞–ø–∫–∏ –≤ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–º—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
        
        return True

    def _handle_paralysis_landing_selection(self, row: int, col: int) -> bool:
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º—ñ—Å—Ü—è –ø—Ä–∏–∑–µ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó –ø–∞—Ä–∞–ª—ñ—á—É"""
        if not self.paralysis_selection:
            return False
        
        triumphator_pos = self.paralysis_selection['triumphator_pos']
        target_pos = self.paralysis_selection['target_pos']
        
        landing_squares = self.move_calculator.get_paralysis_landing_squares(
            target_pos[0], target_pos[1]
        )
        
        if (row, col) not in landing_squares:
            self.paralysis_selection = None
            return False
        
        self._execute_paralysis(triumphator_pos, target_pos, (row, col))
        
        self.paralysis_selection = None
        self.clear_selection()
        
        self.switch_player()
        return True

    def make_move(self, to_row: int, to_col: int) -> bool:
        if self.selected_piece is None:
            return False
        
        from_row, from_col = self.selected_piece
        piece = self.board.get_piece_at(from_row, from_col)
        
        if piece and piece.type == PieceType.TRIUMPHATOR:
            if (to_row, to_col) in self.possible_attacks:
                self.paralysis_selection = {
                    'triumphator_pos': (from_row, from_col),
                    'target_pos': (to_row, to_col)
                }
                self.clear_selection()
                return True
        
        # –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–æ–±–∫–∞ –æ–±–º—ñ–Ω—É –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞ - –≤—ñ–Ω –ù–ï –í–ë–ò–í–ê–Ñ, –∞ –ú–Ü–ù–Ø–Ñ–¢–¨–°–Ø!
        if piece and piece.type == PieceType.ARISTOCRAT:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º—ñ–Ω—É –∑ –≤–æ—Ä–æ–∂–æ—é —Ñ—ñ–≥—É—Ä–æ—é (—á–µ—Ä–≤–æ–Ω–∞ –∫—Ä–∞–ø–∫–∞)
            if (to_row, to_col) in self.possible_attacks:
                target_piece = self.board.get_piece_at(to_row, to_col)
                if target_piece and not target_piece.is_empty():
                    # –¶–µ –æ–±–º—ñ–Ω –∑ –≤–æ—Ä–æ–∂–æ—é —Ñ—ñ–≥—É—Ä–æ—é - –ù–ï –∞—Ç–∞–∫–∞!
                    return self.execute_aristocrat_exchange(from_row, from_col, to_row, to_col)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º—ñ–Ω—É –∑ —Å–æ—é–∑–Ω–æ—é —Ñ—ñ–≥—É—Ä–æ—é (—Å—ñ—Ä–∞ –∫—Ä–∞–ø–∫–∞)
            for move_item in self.possible_moves:
                if isinstance(move_item, tuple) and len(move_item) == 3 and move_item[2] == 'swap':
                    move_row, move_col, _ = move_item
                    if (to_row, to_col) == (move_row, move_col):
                        # –¶–µ –æ–±–º—ñ–Ω –∑ —Å–æ—é–∑–Ω–æ—é —Ñ—ñ–≥—É—Ä–æ—é - –ù–ï –∑–≤–∏—á–∞–π–Ω–∏–π —Ö—ñ–¥!
                        return self.execute_aristocrat_exchange(from_row, from_col, to_row, to_col)
            
            # –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ - —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π —Ö—ñ–¥ –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞ –Ω–∞ –ø—É—Å—Ç—É –∫–ª—ñ—Ç–∏–Ω–∫—É
        
        # –û–±—Ä–æ–±–∫–∞ —Å–≤—è—â–µ–Ω–Ω–æ–≥–æ –æ–±–º—ñ–Ω—É –•—Ä–∞–º—É
        if piece and piece.type == PieceType.TEMPLE:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–ø—Ä–æ–±–∞ –æ–±–º—ñ–Ω—É –∑ —Å–æ—é–∑–Ω–æ—é —Ñ—ñ–≥—É—Ä–æ—é
            if self.temple_swap_selection:
                swap_targets = self.get_temple_swap_targets(from_row, from_col)
                if (to_row, to_col) in swap_targets:
                    # –í–∏–∫–æ–Ω—É—î–º–æ —Å–≤—è—â–µ–Ω–Ω–∏–π –æ–±–º—ñ–Ω
                    result = self.execute_temple_swap(from_row, from_col, to_row, to_col)
                    self.temple_swap_selection = None
                    return result
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ö–æ–¥—ñ–≤ (–≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ñ–æ—Ä–º–∞—Ç –∑ 'swap', –∞–ª–µ –≤–∏–∫–ª—é—á–∞—é—á–∏ –æ–±–º—ñ–Ω–∏)
        is_regular_move = False
        is_swap_move = False
        
        for move_item in self.possible_moves:
            if isinstance(move_item, tuple):
                if len(move_item) == 3 and move_item[2] == 'swap':
                    move_row, move_col, _ = move_item
                    if (to_row, to_col) == (move_row, move_col):
                        is_swap_move = True
                        break
                elif len(move_item) >= 2:
                    move_row, move_col = move_item[0], move_item[1]
                    if (to_row, to_col) == (move_row, move_col):
                        is_regular_move = True
                        break
            else:
                if (to_row, to_col) == move_item:
                    is_regular_move = True
                    break
        
        # –Ø–∫—â–æ —Ü–µ –æ–±–º—ñ–Ω (swap) —ñ –Ω–µ –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç - —â–æ—Å—å –Ω–µ —Ç–∞–∫
        if is_swap_move and piece.type != PieceType.ARISTOCRAT:
            return False
        
        # –î–ª—è –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞ –æ–±–º—ñ–Ω–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤–∏—â–µ, —Ç—É—Ç —Ç—ñ–ª—å–∫–∏ –∑–≤–∏—á–∞–π–Ω—ñ —Ö–æ–¥–∏
        is_attack = (to_row, to_col) in self.possible_attacks
        is_teleport = (to_row, to_col) in self.possible_teleports
        
        if not (is_regular_move or is_attack or is_teleport):
            return False
        
        if is_teleport:
            return self._handle_teleport_move(from_row, from_col, to_row, to_col)
        else:
            # –ö–†–ò–¢–ò–ß–ù–û: is_attack —Ç—É—Ç –æ–∑–Ω–∞—á–∞—î –†–ï–ê–õ–¨–ù–£ –∞—Ç–∞–∫—É, –∞ –Ω–µ –æ–±–º—ñ–Ω!
            # –î–ª—è –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞ –æ–±–º—ñ–Ω–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤–∏—â–µ
            return self._handle_regular_move(from_row, from_col, to_row, to_col, is_attack)

    def _execute_paralysis(self, triumphator_pos: Tuple[int, int], 
                           target_pos: Tuple[int, int], 
                           landing_pos: Tuple[int, int]):
        """–í–∏–∫–æ–Ω—É—î –ø–∞—Ä–∞–ª—ñ—á —Ü—ñ–ª—ñ"""
        triumphator = self.board.get_piece_at(triumphator_pos[0], triumphator_pos[1])
        target = self.board.get_piece_at(target_pos[0], target_pos[1])
        
        if not triumphator or not target:
            return
        
        duration = self._calculate_paralysis_duration(triumphator)
        
        self.board.move_piece(triumphator_pos[0], triumphator_pos[1], 
                              landing_pos[0], landing_pos[1])
        
        self.paralyzed_pieces[target_pos] = {
            'duration': duration,
            'piece_id': target.id,
            'color': target.color
        }
        
        triumphator_color = get_color_name_ua(triumphator.color)
        target_color = get_color_name_ua(target.color)
        target_name = PIECE_NAMES_UA.get(target.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ–∞–∫—Ç–∏—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö —Ö–æ–¥—ñ–≤ (duration - 1, –±–æ duration –≤–∫–ª—é—á–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥)
        turns_to_skip = duration - 1
        game_print(f"‚ö° {triumphator_color} –¢—Ä—ñ—É–º—Ñ–∞—Ç–æ—Ä –ø–∞—Ä–∞–ª—ñ–∑—É–≤–∞–≤ {target_color} {target_name} –Ω–∞ {turns_to_skip} —Ö–æ–¥—ñ–≤!")

    def _calculate_paralysis_duration(self, triumphator: Piece) -> int:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–∞—Ä–∞–ª—ñ—á—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω—É –û—á–µ–π.
        Duration = –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–¥—ñ–≤, —è–∫—ñ –≥—Ä–∞–≤–µ—Ü—å –ü–†–û–ü–£–°–¢–ò–¢–¨.
        –î–ª—è –ø—Ä–æ–ø—É—Å–∫—É 1 —Ö–æ–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ duration = 2 (–±–æ —Ç–∞–π–º–µ—Ä –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ —Ö–æ–¥—É —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è).
        """
        linked_eyes = self.triumphant_eye_links.get(triumphator.id, [])
        
        living_eyes = 0
        for eye_id in linked_eyes:
            if self.board.find_piece_position(eye_id):
                living_eyes += 1
        
        # –Ø–∫—â–æ —î –∂–∏–≤—ñ –æ—á—ñ: –ø—Ä–æ–ø—É—Å–∫ 1 —Ö–æ–¥—É (duration=2)
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –æ—á–µ–π: –ø—Ä–æ–ø—É—Å–∫ 2 —Ö–æ–¥—ñ–≤ (duration=3)
        return 2 if living_eyes > 0 else 3

    def _handle_teleport_move(self, from_row: int, from_col: int, to_row: int, to_col: int) -> bool:
        """–û–±—Ä–æ–±–ª—è—î —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü—ñ—é –º—ñ–∂ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—è–º–∏"""
        piece = self.board.get_piece_at(from_row, from_col)
        
        from_nebula = get_nebula_name(from_row, from_col)
        to_nebula = get_nebula_name(to_row, to_col)
        
        penalty = 1 if from_row != to_row else 0
        
        piece_name = PIECE_NAMES_UA.get(piece.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
        piece_color = get_color_name_ua_with_gender(piece.color, piece.type)
        from_nebula_ua = get_nebula_emoji_name(from_nebula) if from_nebula else "–Ω–µ–≤—ñ–¥–æ–º–∞"
        to_nebula_ua = get_nebula_emoji_name(to_nebula) if to_nebula else "–Ω–µ–≤—ñ–¥–æ–º–∞"
        
        move_log = f"üí´ {piece_color} {piece_name} id({piece.id}) –∑ {from_nebula_ua} —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—ñ ({from_row}, {from_col}) —Ç–µ–ª–µ–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –Ω–∞ {to_nebula_ua} —Ç—É–º–∞–Ω–Ω—ñ—Å—Ç—å ({to_row}, {to_col})"
        penalty_text = " (–∑ —à—Ç—Ä–∞—Ñ–æ–º —á–∞—Å—É -1)" if penalty else " (–±–µ–∑ —à—Ç—Ä–∞—Ñ—É —á–∞—Å—É)"
        move_log += penalty_text
        
        game_print(move_log)
        
        self.board.move_piece(from_row, from_col, to_row, to_col)
        self.teleport_piece(piece.id, (from_row, from_col), (to_row, to_col))
        
        move = Move(
            from_square=(from_row, from_col),
            to_square=(to_row, to_col),
            is_nebula_teleport=True,
            teleport_penalty=penalty
        )
        self.move_history.append(move)
        
        self.switch_player()
        return True

    def _handle_regular_move(self, from_row: int, from_col: int, to_row: int, to_col: int, is_attack: bool) -> bool:
        """–û–±—Ä–æ–±–ª—è—î –∑–≤–∏—á–∞–π–Ω—ñ —Ö–æ–¥–∏ —Ç–∞ –∞—Ç–∞–∫–∏"""
        piece = self.board.get_piece_at(from_row, from_col)
        captured_piece = self.board.get_piece_at(to_row, to_col) if is_attack else None
        
        is_pawn_back_move = False
        if piece.type == PieceType.PAWN and not is_attack:
            direction = -1 if piece.color == PieceColor.WHITE else 1
            if (to_row - from_row) == -direction:
                is_pawn_back_move = True
                self.move_calculator.register_pawn_back_move(piece.id)
        
        move = Move(
            from_square=(from_row, from_col),
            to_square=(to_row, to_col),
            is_capture=is_attack,
            is_pawn_back_move=is_pawn_back_move
        )
        self.move_history.append(move)
        
        if captured_piece and not captured_piece.is_empty():
            if captured_piece.color == PieceColor.WHITE:
                self.captured_pieces["white"].append(captured_piece)
            else:
                self.captured_pieces["black"].append(captured_piece)
                
            if captured_piece.type == PieceType.PAWN:
                self.update_resurrection_availability(captured_piece.color)
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ü–º–ø–æ—Ä—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        
        piece_name = PIECE_NAMES_UA.get(piece.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
        piece_color = get_color_name_ua_with_gender(piece.color, piece.type)
        from_chess = coordinates_to_chess_notation(from_row, from_col)
        to_chess = coordinates_to_chess_notation(to_row, to_col)
        
        from_is_nebula = is_nebula_coordinates(from_row, from_col)
        to_is_nebula = is_nebula_coordinates(to_row, to_col)
        
        if from_is_nebula:
            from_nebula_name = get_nebula_name(from_row, from_col)
            from_nebula_emoji = get_nebula_emoji_name(from_nebula_name) if from_nebula_name else ""
            from_desc = f"{from_nebula_emoji} —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—ñ ({from_row}, {from_col})"
        else:
            from_desc = f"{from_chess} ({from_row}, {from_col})"
        
        timer_reset = ""
        if from_is_nebula and not to_is_nebula:
            timer_reset = ", —Ç–∞–π–º–µ—Ä –æ–±–Ω—É–ª—è—î—Ç—å—Å—è"
        
        if is_attack and captured_piece:
            captured_name = PIECE_NAMES_UA.get(captured_piece.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
            captured_color = get_color_name_ua_with_gender(captured_piece.color, captured_piece.type)
            
            if to_is_nebula:
                nebula_name = get_nebula_name(to_row, to_col)
                nebula_emoji_name = get_nebula_emoji_name(nebula_name) if nebula_name else ""
                to_desc = f"{nebula_emoji_name} —Ç—É–º–∞–Ω–Ω—ñ—Å—Ç—å üåÄ({to_row}, {to_col}), –ø—Ä–∏—Å–≤–æ—î–Ω–æ —á–∞—Å 5"
            else:
                to_desc = f"{to_chess} ({to_row}, {to_col})"
            
            game_print(f"‚öîÔ∏è {piece_color} {piece_name} id({piece.id}) –∑ {from_desc} –∞—Ç–∞–∫—É—î {captured_color} {captured_name} id({captured_piece.id}) –Ω–∞ {to_desc}{timer_reset}")
        else:
            if to_is_nebula:
                nebula_name = get_nebula_name(to_row, to_col)
                nebula_emoji_name = get_nebula_emoji_name(nebula_name) if nebula_name else ""
                to_desc = f"{nebula_emoji_name} —Ç—É–º–∞–Ω–Ω—ñ—Å—Ç—å üåÄ({to_row}, {to_col}), –ø—Ä–∏—Å–≤–æ—î–Ω–æ —á–∞—Å 5"
            else:
                to_desc = f"{to_chess} ({to_row}, {to_col})"
                
            game_print(f"üèÉ {piece_color} {piece_name} id({piece.id}) —Ö–æ–¥–∏—Ç—å –∑ {from_desc} –Ω–∞ {to_desc}{timer_reset}")

        # ‚ïê‚ïê‚ïê –ú–ï–•–ê–ù–Ü–ö–ê –ï–õ–ï–ö–¢–†–ò–ß–ù–û–ì–û –ü–ê–†–ê–õ–Ü–ß–£ –ë–õ–ò–°–ö–ê–í–ö–ò ‚ïê‚ïê‚ïê
        # –Ø–∫—â–æ –∑–∞—Ö–æ–ø–ª—é—î—Ç—å—Å—è –ë–ª–∏—Å–∫–∞–≤–∫–∞, –∞—Ç–∞–∫—É—é—á–∞ —Ñ—ñ–≥—É—Ä–∞ –ø–∞—Ä–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ 1 —Ö—ñ–¥
        # –í–∏–Ω—è—Ç–æ–∫: –ö–æ—Ä–æ–ª—å –Ω–µ –ø–∞—Ä–∞–ª—ñ–∑—É—î—Ç—å—Å—è
        # –û—Å–æ–±–ª–∏–≤–µ –ø—Ä–∞–≤–∏–ª–æ: –ë–ª–∏—Å–∫–∞–≤–∫–∞, —â–æ –≤–±–∏–≤–∞—î —ñ–Ω—à—É –±–ª–∏—Å–∫–∞–≤–∫—É, —Ç–µ–∂ –∑–Ω–∏—â—É—î—Ç—å—Å—è
        lightning_paralysis_applied = False
        lightning_mutual_destruction = False
        if is_attack and captured_piece and captured_piece.type == PieceType.LIGHTNING:
            # –Ø–∫—â–æ –∞—Ç–∞–∫—É—é—á–∞ —Ñ—ñ–≥—É—Ä–∞ - –ö–æ—Ä–æ–ª—å, –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è
            if piece.type == PieceType.KING:
                pass
            # –Ø–∫—â–æ –∞—Ç–∞–∫—É—é—á–∞ —Ñ—ñ–≥—É—Ä–∞ - —Ç–µ–∂ –ë–ª–∏—Å–∫–∞–≤–∫–∞, –æ–±–∏–¥–≤—ñ –∑–Ω–∏—â—É—é—Ç—å—Å—è
            elif piece.type == PieceType.LIGHTNING:
                lightning_mutual_destruction = True
                attacker_name = PIECE_NAMES_UA.get(piece.type, "—Ñ—ñ–≥—É—Ä–∞")
                attacker_color = get_color_name_ua_with_gender(piece.color, piece.type)
                target_color = get_color_name_ua_with_gender(captured_piece.color, captured_piece.type)
                game_print(f"‚ö°üí•üí• {attacker_color} –±–ª–∏—Å–∫–∞–≤–∫–∞ id({piece.id}) –∞—Ç–∞–∫—É—î {target_color} –±–ª–∏—Å–∫–∞–≤–∫—É id({captured_piece.id})!")
                game_print(f"   üíÄüíÄ –û–±–∏–¥–≤—ñ –±–ª–∏—Å–∫–∞–≤–∫–∏ –∑–Ω–∏—â—É—é—Ç—å—Å—è –≤ –µ–ª–µ–∫—Ç—Ä–∏—á–Ω–æ–º—É –≤–∏–±—É—Ö—É!")
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∑–∞—î–º–Ω–æ–≥–æ –∑–Ω–∏—â–µ–Ω–Ω—è –±–ª–∏—Å–∫–∞–≤–æ–∫
            # –Ü–Ω—à—ñ —Ñ—ñ–≥—É—Ä–∏ –ø–∞—Ä–∞–ª—ñ–∑—É—é—Ç—å—Å—è
            else:
                lightning_paralysis_applied = True
                attacker_name = PIECE_NAMES_UA.get(piece.type, "—Ñ—ñ–≥—É—Ä–∞")
                attacker_color = get_color_name_ua_with_gender(piece.color, piece.type)
                game_print(f"‚ö°üí• {attacker_color} {attacker_name} id({piece.id}) –∑–∞—Ö–æ–ø–∏–≤ –ë–ª–∏—Å–∫–∞–≤–∫—É —ñ –æ—Ç—Ä–∏–º–∞–≤ –µ–ª–µ–∫—Ç—Ä–∏—á–Ω–∏–π —à–æ–∫!")
                to_notation = coordinates_to_chess_notation(to_row, to_col)
                game_print(f"   ‚õî {attacker_name} –Ω–∞ {to_notation} ({to_row}, {to_col}) –ø–∞—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –Ω–∞ 1 —Ö—ñ–¥!")
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—ñ–¥ –ë–ª–∏—Å–∫–∞–≤–∫–∏
        self.board.move_piece(from_row, from_col, to_row, to_col)
        
        # –í–∑–∞—î–º–Ω–µ –∑–Ω–∏—â–µ–Ω–Ω—è –±–ª–∏—Å–∫–∞–≤–æ–∫ - –≤–∏–¥–∞–ª—è—î–º–æ –∞—Ç–∞–∫—É—é—á—É –±–ª–∏—Å–∫–∞–≤–∫—É –ø—ñ—Å–ª—è —Ö–æ–¥—É
        if lightning_mutual_destruction:
            destroyed_piece = self.board.get_piece_at(to_row, to_col)
            if destroyed_piece:
                self.board.clear_square(to_row, to_col)
                game_print(f"   ‚ö° {get_color_name_ua_with_gender(destroyed_piece.color, destroyed_piece.type)} –±–ª–∏—Å–∫–∞–≤–∫–∞ id({destroyed_piece.id}) –Ω–∞ {coordinates_to_chess_notation(to_row, to_col)} –∑–Ω–∏—â–µ–Ω–∞")
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞—Ä–∞–ª—ñ—á –ü–Ü–°–õ–Ø –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∏ –Ω–∞ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
        if lightning_paralysis_applied:
            self.paralyzed_pieces[(to_row, to_col)] = {
                'duration': 2,  # duration=2 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É 1 –ø–æ–≤–Ω–æ–≥–æ —Ö–æ–¥—É
                'piece_id': piece.id,
                'color': piece.color
            }
        
        self._process_move_side_effects(piece, from_row, from_col, to_row, to_col, captured_piece)
        
        enhancement_triggered = self._check_eye_enhancement(piece, to_row)

        if enhancement_triggered:
            return True

        # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É –ú—ñ—Å—è—Ü—è - –ö–†–ò–¢–ò–ß–ù–û: –ø–µ—Ä—à–∏–π —Ö—ñ–¥ –û–ë–û–í'–Ø–ó–ö–û–í–û –º–∞—î –±—É—Ç–∏ –ú—ñ—Å—è—Ü–µ–º!
        color_key = "white" if piece.color == PieceColor.WHITE else "black"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–ª—å–æ—Ä—É
        if self.moon_double_move_active[color_key]:
            if piece.type == PieceType.MOON:
                # –•—ñ–¥ –ú—ñ—Å—è—Ü–µ–º - –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥
                if self.moon_double_move_first_piece is None:
                    # –ü–µ—Ä—à–∏–π —Ö—ñ–¥ –ú—ñ—Å—è—Ü–µ–º
                    self.moon_double_move_first_piece = piece.id
                    moon_notation = coordinates_to_chess_notation(to_row, to_col)
                    from_notation = coordinates_to_chess_notation(from_row, from_col)
                    game_print(f"üåô –ü–µ—Ä—à–∏–π —Ö—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É –ú—ñ—Å—è—Ü–µ–º id({piece.id}) {from_notation} –Ω–∞ {moon_notation} ({to_row}, {to_col}). –ó—Ä–æ–±—ñ—Ç—å –¥—Ä—É–≥–∏–π —Ö—ñ–¥ –±—É–¥—å-—è–∫–∏–º –ú—ñ—Å—è—Ü–µ–º!")
                    color_name_ua = "–±—ñ–ª–∏–π" if piece.color == PieceColor.WHITE else "—á–æ—Ä–Ω–∏–π"
                    move_text = f"{color_name_ua} –º—ñ—Å—è—Ü—å id({piece.id}) —Ö–æ–¥–∏—Ç—å –∑ {from_notation} –Ω–∞ {moon_notation}\n–ü–µ—Ä—à–∏–π —Ö—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É –ú—ñ—Å—è—Ü–µ–º id({piece.id}) {from_notation} –Ω–∞ {moon_notation}"
                    # –î–æ–¥–∞—î–º–æ PGN —Ö—ñ–¥
                    from –ª–æ–≥—É–≤–∞–Ω–Ω—è import pgn_moves
                    pgn_move = f"{from_notation}xD{moon_notation}"
                    pgn_moves.append(pgn_move)
                    
                    # –ù–ï –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ –≥—Ä–∞–≤—Ü—è
                    self.clear_selection()
                    return True
                else:
                    # –î—Ä—É–≥–∏–π —Ö—ñ–¥ –ú—ñ—Å—è—Ü–µ–º - –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥
                    moon_notation = coordinates_to_chess_notation(to_row, to_col)
                    from_notation = coordinates_to_chess_notation(from_row, from_col)
                    game_print(f"üåô –î—Ä—É–≥–∏–π —Ö—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É –ú—ñ—Å—è—Ü–µ–º id({piece.id}) {from_notation} –Ω–∞ {moon_notation} ({to_row}, {to_col}). –ü–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    
                    # –ù–ï –≤–∏–º–∏–∫–∞—î–º–æ moon_double_move_active - –≤—ñ–Ω –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–≤–∂–¥–∏!
                    self.moon_double_move_first_piece = None
                    self.switch_player()
                    return True
            else:
                # –Ø–∫—â–æ –≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ –ø–µ—Ä—à–∏–π —Ö—ñ–¥ –º—ñ—Å—è—Ü–µ–º, –¥—Ä—É–≥–∏–π –û–ë–û–í'–Ø–ó–ö–û–í–û –º–∞—î –±—É—Ç–∏ –º—ñ—Å—è—Ü–µ–º!
                if self.moon_double_move_first_piece is not None:
                    game_print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ü—ñ—Å–ª—è —Ö–æ–¥—É –º—ñ—Å—è—Ü–µ–º –¥—Ä—É–≥–∏–π —Ö—ñ–¥ –º–∞—î –±—É—Ç–∏ —Ç–∞–∫–æ–∂ –º—ñ—Å—è—Ü–µ–º!")
                    return False
                
                # –Ø–∫—â–æ –ø–µ—Ä—à–∏–π —Ö—ñ–¥ —â–µ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥ –Ω–∞ —Ü–µ–π —Ä–∞–∑
                self.moon_double_move_first_piece = None  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
                # moon_double_move_active –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è True - –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ù–ï –≤—Ç—Ä–∞—á–∞—î—Ç—å—Å—è!
                self.switch_player()
                return True
        
        # –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ (—è–∫—â–æ –Ω–µ –ú—ñ—Å—è—Ü—å –∞–±–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É)
        if piece.type == PieceType.MOON and self.moon_double_move is None:
            self.moon_double_move = (to_row, to_col)
        else:
            self.switch_player()
        
        return True

    def _process_move_side_effects(self, piece: Piece, from_row: int, from_col: int, to_row: int, to_col: int, captured_piece: Optional[Piece]):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–±—ñ—á–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ —Ö–æ–¥—É"""
        
        from_is_nebula = is_nebula_coordinates(from_row, from_col)
        to_is_nebula = is_nebula_coordinates(to_row, to_col)

        if from_is_nebula and not to_is_nebula:
            if piece.id in self.nebula_piece_timers:
                del self.nebula_piece_timers[piece.id]
        elif not from_is_nebula and to_is_nebula:
            self.enter_nebula(piece.id, (to_row, to_col))

        if captured_piece and captured_piece.type in [PieceType.SHIELD, PieceType.FURY]:
            self._handle_capture_of_shield_or_fury(captured_piece, to_row, to_col)
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—é–≤–∞–Ω–Ω—è –Ω–∞ –¥—É—à—ñ –í—Å–∞–¥–Ω–∏–∫–æ–º
        if captured_piece and piece.type == PieceType.RIDER:
            self._handle_soul_hunting(piece, captured_piece)
        
        # –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É –ú—ñ—Å—è—Ü—è –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –æ–±–æ—Ö –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç—ñ–≤
        if captured_piece and captured_piece.type == PieceType.ARISTOCRAT:
            self._check_aristocrat_death_for_moon_activation(captured_piece)

    def _check_eye_enhancement(self, piece: Piece, to_row: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –º–µ—Ö–∞–Ω—ñ–∫—É –ø–æ—Å–∏–ª–µ–Ω–Ω—è –û–∫–∞."""
        if piece.type != PieceType.EYE:
            return False

        color_key = "white" if piece.color == PieceColor.WHITE else "black"
        final_rank = 1 if piece.color == PieceColor.WHITE else 20

        if to_row == final_rank and not self.eye_enhancement_used[color_key]:
            player_eyes = self.board.get_all_pieces_of_type(PieceType.EYE, piece.color)
            
            if len(player_eyes) >= 4:
                game_print("üëÅÔ∏è –û–∫–æ –¥–æ—Å—è–≥–ª–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –ª—ñ–Ω—ñ—ó! –û–±–µ—Ä—ñ—Ç—å 3 –∑ 4 –û—á–µ–π –¥–ª—è –ø–æ—Å–∏–ª–µ–Ω–Ω—è.")
                self.eye_enhancement_selection = {
                    "player": piece.color,
                    "selectable_eyes": [pos for pos in player_eyes],
                    "selected_pos": []
                }
                return True
            elif player_eyes:
                game_print("üëÅÔ∏è –û–∫–æ –¥–æ—Å—è–≥–ª–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –ª—ñ–Ω—ñ—ó! –í—Å—ñ –≤–∞—à—ñ –û–∫–∞ –ø–æ—Å–∏–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")
                for r, c in player_eyes:
                    eye_to_enhance = self.get_piece_at(r, c)
                    if eye_to_enhance:
                        eye_to_enhance.is_enhanced = True
                        chess_pos = coordinates_to_chess_notation(r, c)
                        game_print(f"üëÅÔ∏è –û–∫–æ ID {eye_to_enhance.id} –Ω–∞ {chess_pos} ({r}, {c}) –±—É–ª–æ –ø–æ—Å–∏–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!")
                self.eye_enhancement_used[color_key] = True
                self.switch_player()
                return True
        
        return False

    def _handle_capture_of_shield_or_fury(self, captured_piece: Piece, row: int, col: int):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —â–∏—Ç–∞ –∞–±–æ —Ñ—É—Ä—ñ—ó –∑ –ø—Ä–∏–≤'—è–∑–∫–æ—é"""
        
        if captured_piece.type == PieceType.SHIELD:
            self._log_unprotected_pieces(row, col, captured_piece.color)

        self.move_calculator.update_board(self.board)
        additional_casualties = self.move_calculator.handle_shield_fury_bond(captured_piece, row, col)
        
        for casualty_pos in additional_casualties:
            casualty_piece = self.board.get_piece_at(casualty_pos[0], casualty_pos[1])
            if casualty_piece:
                casualty_color = get_color_name_ua(casualty_piece.color)
                casualty_name = PIECE_NAMES_UA.get(casualty_piece.type)
                casualty_chess = coordinates_to_chess_notation(casualty_pos[0], casualty_pos[1])
                game_print(f"üí• –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤—Ç—Ä–∞—Ç–∞: {casualty_color} {casualty_name} id({casualty_piece.id}) –∑–Ω–∏—â–µ–Ω–æ –Ω–∞ {casualty_chess} ({casualty_pos[0]}, {casualty_pos[1]})!")
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –≤—Ç—Ä–∞—Ç–∏ –¥–æ –ø–∞—Ä—Ç—ñ—ó
                # –ö–†–ò–¢–ò–ß–ù–û: –§—ñ–∑–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —Ñ—ñ–≥—É—Ä—É –∑ –¥–æ—à–∫–∏!
                self.board.clear_square(casualty_pos[0], casualty_pos[1])
                
                # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –∑–∞—Ö–æ–ø–ª–µ–Ω–∏—Ö —Ñ—ñ–≥—É—Ä
                if casualty_piece.color == PieceColor.WHITE:
                    self.captured_pieces["white"].append(casualty_piece)
                else:
                    self.captured_pieces["black"].append(casualty_piece)

    def _handle_soul_hunting(self, rider: Piece, captured_piece: Piece):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–ª—é–≤–∞–Ω–Ω—è –í—Å–∞–¥–Ω–∏–∫–∞ –Ω–∞ –¥—É—à—ñ (–∫—ñ–Ω—å, –æ—Ñ—ñ—Ü–µ—Ä, –≤—Å–∞–¥–Ω–∏–∫)"""
        target_types = [PieceType.KNIGHT, PieceType.BISHOP, PieceType.RIDER]
        
        if captured_piece.type not in target_types:
            return
        
        color_key = "white" if rider.color == PieceColor.WHITE else "black"
        
        # –í–ø–æ–ª—é–≤–∞—Ç–∏ –¥—É—à—É
        if not self.hunted_souls[color_key][captured_piece.type]:
            self.hunted_souls[color_key][captured_piece.type] = True
            
            captured_name = PIECE_NAMES_UA.get(captured_piece.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
            rider_name = PIECE_NAMES_UA.get(rider.type, "–≤—Å–∞–¥–Ω–∏–∫")
            rider_color = get_color_name_ua(rider.color)
            
            game_print(f"üëª {rider_color} {rider_name} id({rider.id}) –≤–ø–æ–ª—é–≤–∞–≤ –¥—É—à—É {captured_name}!")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ç–æ—á–∫–∏ –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è
            self._update_soul_corners()
    
    def _update_soul_corners(self):
        """–û–Ω–æ–≤–ª—é—î –∫—É—Ç–æ—á–∫–∏ –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö"""
        self.soul_corners = []
        
        # –°—Ç–∞—Ä—Ç–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –±—ñ–ª–∏—Ö —Ç–∞ —á–æ—Ä–Ω–∏—Ö
        start_positions = {
            PieceType.KNIGHT: {"white": [(20, 6), (20, 13)], "black": [(1, 6), (1, 13)]},
            PieceType.BISHOP: {"white": [(20, 8), (20, 11)], "black": [(1, 8), (1, 11)]},
            PieceType.RIDER: {"white": [(20, 3), (20, 16)], "black": [(1, 3), (1, 16)]}
        }
        
        for color in ["white", "black"]:
            player_color = PieceColor.WHITE if color == "white" else PieceColor.BLACK
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è
            if self.performed_resurrection[color]:
                continue
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —î –∂–∏–≤—ñ –≤—Å–∞–¥–Ω–∏–∫–∏ —É –≥—Ä–∞–≤—Ü—è
            rider_count = len(self.board.get_all_pieces_of_type(PieceType.RIDER, player_color))
            if rider_count == 0:
                continue
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–∏–ø –≤–ø–æ–ª—é–≤–∞–Ω–æ—ó –¥—É—à—ñ
            for piece_type in [PieceType.KNIGHT, PieceType.BISHOP, PieceType.RIDER]:
                if not self.hunted_souls[color][piece_type]:
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ –∫—É—Ç–æ—á–∫–∞
                is_green = False
                if piece_type == PieceType.RIDER:
                    # –î–ª—è –≤—Å–∞–¥–Ω–∏–∫–∞: —Ä—ñ–≤–Ω–æ 1 –≤—Å–∞–¥–Ω–∏–∫ –∑–∞–ª–∏—à–∏–≤—Å—è
                    is_green = rider_count == 1
                else:
                    # –î–ª—è –∫–æ–Ω—è —Ç–∞ –æ—Ñ—ñ—Ü–µ—Ä–∞: –≤—Ç—Ä–∞—á–µ–Ω–∞ –û–î–ù–ê —Ñ—ñ–≥—É—Ä–∞ (–∑–∞–ª–∏—à–∏–ª–∞—Å—è 1 –∑ 2-—Ö)
                    piece_count = len(self.board.get_all_pieces_of_type(piece_type, player_color))
                    is_green = piece_count == 1  # –ë—É–ª–æ 2, –∑–∞–ª–∏—à–∏–ª–∞—Å—è 1 - –º–æ–∂–Ω–∞ –≤–æ—Å–∫—Ä–µ—à–∞—Ç–∏
                
                # –î–æ–¥–∞—î–º–æ –∫—É—Ç–æ—á–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó
                for row, col in start_positions[piece_type][color]:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤—ñ–ª—å–Ω–∞
                    if self.board.is_square_empty(row, col):
                        self.soul_corners.append((row, col, piece_type, is_green, player_color))

    def _log_unprotected_pieces(self, shield_row: int, shield_col: int, shield_color: PieceColor):
        """–õ–æ–≥—É—î —Ñ—ñ–≥—É—Ä–∏, —â–æ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –∑–∞—Ö–∏—Å—Ç –ø—ñ—Å–ª—è –∑–Ω–∏—â–µ–Ω–Ω—è —â–∏—Ç–∞"""
        shield_zone = self.move_calculator._get_shield_zone(shield_row, shield_col)
        unprotected_pieces = []
        
        for r, c in shield_zone:
            if (r, c) == (shield_row, shield_col): 
                continue
            
            piece_on_cell = self.board.get_piece_at(r, c)
            if piece_on_cell and not piece_on_cell.is_empty() and piece_on_cell.color == shield_color:
                pos = self.board.find_piece_position(piece_on_cell.id)
                if pos:
                    chess_notation = coordinates_to_chess_notation(pos[0], pos[1])
                    piece_name = PIECE_NAMES_UA.get(piece_on_cell.type)
                    unprotected_pieces.append(f"{piece_name} id({piece_on_cell.id}) –Ω–∞ {chess_notation} ({pos[0]}, {pos[1]})")
        
        if unprotected_pieces:
            pieces_str = ", ".join(unprotected_pieces)
            game_print(f"üõ°Ô∏è –§—ñ–≥—É—Ä–∏, —â–æ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –∑–∞—Ö–∏—Å—Ç: {pieces_str}")
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Ç—Ä–∞—Ç–∏ –∑–∞—Ö–∏—Å—Ç—É
    def switch_player(self):
        """–ü–µ—Ä–µ–º–∏–∫–∞—î –≥—Ä–∞–≤—Ü—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥"""
        self.clear_selection()
        self.moon_double_move = None
        
        self.recently_resurrected_pieces.clear()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ç–æ—á–∫–∏ –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è –¥—É—à
        self._update_soul_corners()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä–∏ –ø–∞—Ä–∞–ª—ñ—á—É –ü–ï–†–ï–î –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è–º –≥—Ä–∞–≤—Ü—è
        # –¢–∞–π–º–µ—Ä–∏ –∑–º–µ–Ω—à—É—é—Ç—å—Å—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è (—Ç–æ–≥–æ, —Ö—Ç–æ —â–æ–π–Ω–æ –ø–æ—Ö–æ–¥–∏–≤)
        self._update_paralysis_timers()
        
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ö–æ–¥—É
        from –ª–æ–≥—É–≤–∞–Ω–Ω—è import finish_current_turn
        finish_current_turn()
        
        self.current_player = PieceColor.BLACK if self.current_player == PieceColor.WHITE else PieceColor.WHITE
        self._update_paralysis_timers()
        
        # –ó–±—ñ–ª—å—à—É—î–º–æ –Ω–æ–º–µ—Ä —Ö–æ–¥—É –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ö–æ–¥—É (–Ω–µ —Ç—ñ–ª—å–∫–∏ –±—ñ–ª–∏—Ö)
        self.turn_number += 1
        
        if self.move_calculator:
            self.move_calculator.update_board(self.board)
            
            attacker_pos = self.move_calculator._is_king_in_check(self.current_player)
            if attacker_pos:
                attacker_piece = self.board.get_piece_at(attacker_pos[0], attacker_pos[1])
                king_pos = self.move_calculator._find_king(self.current_player)
                king_piece = self.board.get_piece_at(king_pos[0], king_pos[1])

                if attacker_piece and king_piece:
                    attacker_name = PIECE_NAMES_UA.get(attacker_piece.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
                    attacker_color = get_color_name_ua_with_gender(attacker_piece.color, attacker_piece.type)
                    attacker_notation = coordinates_to_chess_notation(attacker_pos[0], attacker_pos[1])
                    king_notation = coordinates_to_chess_notation(king_pos[0], king_pos[1])

                    game_print(f"‚ôöÔ∏è –®–∞—Ö! {attacker_color} {attacker_name} id({attacker_piece.id}) –∑ {attacker_notation} ({attacker_pos[0]}, {attacker_pos[1]}) —Å—Ç–∞–≤–∏—Ç—å —à–∞—Ö –∫–æ—Ä–æ–ª—é id({king_piece.id}) –Ω–∞ {king_notation} ({king_pos[0]}, {king_pos[1]})")
                    
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —à–∞—Ö—É
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Ç—É
            if self.move_calculator.is_checkmate(self.current_player):
                self.game_over = True
                self.winner = 'white' if self.current_player == PieceColor.BLACK else 'black'
                self.game_over_reason = 'checkmate'
                winner_name = '–ë—ñ–ª—ñ' if self.winner == 'white' else '–ß–æ—Ä–Ω—ñ'
                loser_name = '–ß–æ—Ä–Ω—ñ' if self.winner == 'white' else '–ë—ñ–ª—ñ'
                game_print(f"")
                game_print(f"{'='*60}")
                game_print(f"üëë –ú–ê–¢! {winner_name} –ø–µ—Ä–µ–º–æ–≥–ª–∏!")
                game_print(f"‚ôî {loser_name} –∫–æ—Ä–æ–ª—å —É –±–µ–∑–≤–∏—Ö—ñ–¥–Ω—ñ–π —Å–∏—Ç—É–∞—Ü—ñ—ó!")
                game_print(f"{'='*60}")
                game_print(f"")
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
                end_game(f"–∑–∞–∫—ñ–Ω—á–µ–Ω–∞ –≥—Ä–∞ - –ú–ê–¢, –ø–µ—Ä–µ–º—ñ–≥ {winner_name}")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ç—É
            if self.move_calculator.is_stalemate(self.current_player):
                self.game_over = True
                self.winner = 'draw'
                self.game_over_reason = 'stalemate'
                current_name = '–ë—ñ–ª—ñ' if self.current_player == PieceColor.WHITE else '–ß–æ—Ä–Ω—ñ'
                game_print(f"")
                game_print(f"{'='*60}")
                game_print(f"ü§ù –ü–ê–¢! –ù—ñ—á–∏—è!")
                game_print(f"‚ôî {current_name} –∫–æ—Ä–æ–ª—å –Ω–µ –ø—ñ–¥ —à–∞—Ö–æ–º, –∞–ª–µ –Ω–µ–º–∞—î –ª–µ–≥–∞–ª—å–Ω–∏—Ö —Ö–æ–¥—ñ–≤!")
                game_print(f"{'='*60}")
                game_print(f"")
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ç—É
                end_game("–∑–∞–∫—ñ–Ω—á–µ–Ω–∞ –≥—Ä–∞ - –ü–ê–¢, –Ω—ñ—á–∏—è")
                return

        self._update_nebula_timers()

        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        game_print(f"\033[1m{current_time}, –•—ñ–¥ {'–ë—ñ–ª–æ–≥–æ' if self.current_player == PieceColor.WHITE else '–ß–æ—Ä–Ω–æ–≥–æ'} –ì—Ä–∞–≤—Ü—è - –Ω–æ–º–µ—Ä —Ö–æ–¥—É {self.turn_number}:\033[0m")

        for piece_id, timer_info in self.nebula_piece_timers.items():
            pos = self.board.find_piece_position(piece_id)
            if pos:
                piece = self.board.get_piece_at(pos[0], pos[1])
                if piece and piece.color == self.current_player:
                    nebula_name = get_nebula_name(pos[0], pos[1])
                    if nebula_name:
                        emoji = get_nebula_emoji_name(nebula_name)
                        color_name = get_color_name_ua_with_gender(piece.color, piece.type)
                        piece_name = PIECE_NAMES_UA.get(piece.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
                        game_print(f"üåÄ {color_name} {piece_name} id({piece.id}) —â–æ —Å—Ç–æ—ó—Ç—å –Ω–∞ {emoji} –¢—É–º–∞–Ω–Ω–æ—Å—Ç—ñ ({pos[0]}, {pos[1]}) –º–∞—î —Ç–∞–π–º–µ—Ä - {timer_info['timer']}.")

    def _update_paralysis_timers(self):
        """
        –û–Ω–æ–≤–ª—é—î —Ç–∞–π–º–µ—Ä–∏ –ø–∞—Ä–∞–ª—ñ—á—É –¥–ª—è –ü–û–¢–û–ß–ù–û–ì–û –≥—Ä–∞–≤—Ü—è (—Ç–æ–≥–æ, —Ö—Ç–æ —â–æ–π–Ω–æ –ü–û–•–û–î–ò–í).
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ü–ï–†–ï–î switch_player(), —Ç–æ–º—É current_player - —Ü–µ –≥—Ä–∞–≤–µ—Ü—å, —è–∫–∏–π –∑–∞–≤–µ—Ä—à—É—î —Ö—ñ–¥.
        –ó–º–µ–Ω—à—É—î–º–æ duration –¥–ª—è —Ñ—ñ–≥—É—Ä current_player –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤—ñ–Ω –ø–æ—Ö–æ–¥–∏–≤.
        
        –õ–æ–≥—ñ–∫–∞: 
        - –ë—ñ–ª–∏–π –ø–∞—Ä–∞–ª—ñ–∑—É—î —á–æ—Ä–Ω–æ–≥–æ (duration=2)
        - –ß–æ—Ä–Ω–∏–π —Ö–æ–¥–∏—Ç—å —ñ–Ω—à–æ—é —Ñ—ñ–≥—É—Ä–æ—é ‚Üí duration –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –¥–æ 1 (–∫–æ—Ä–æ–ª—å –≤—Å–µ —â–µ –ø–∞—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π)
        - –ë—ñ–ª–∏–π —Ö–æ–¥–∏—Ç—å
        - –ß–æ—Ä–Ω–∏–π —Ö–æ–¥–∏—Ç—å —ñ–Ω—à–æ—é —Ñ—ñ–≥—É—Ä–æ—é ‚Üí duration –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –¥–æ 0 (–ø–∞—Ä–∞–ª—ñ—á –∑–Ω—è—Ç–æ)
        """
        pieces_to_unparalyze = []
        # –Ü—Ç–µ—Ä—É—î–º–æ –ø–æ –∫–æ–ø—ñ—ó, –æ—Å–∫—ñ–ª—å–∫–∏ —Å–ª–æ–≤–Ω–∏–∫ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è
        for pos, paralysis_info in list(self.paralyzed_pieces.items()):
            # –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ñ—ñ–≥—É—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è (—è–∫–∏–π —â–æ–π–Ω–æ –ø–æ—Ö–æ–¥–∏–≤)
            if paralysis_info.get('color') == self.current_player:
                paralysis_info['duration'] -= 1
                if paralysis_info['duration'] < 1:
                    pieces_to_unparalyze.append(pos)
        
        for pos in pieces_to_unparalyze:
            if pos in self.paralyzed_pieces:
                del self.paralyzed_pieces[pos]
                game_print(f"‚úÖ –§—ñ–≥—É—Ä–∞ –Ω–∞ {coordinates_to_chess_notation(pos[0], pos[1])} –±—ñ–ª—å—à–µ –Ω–µ –ø–∞—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
    
    def _update_nebula_timers(self):
        """–û–Ω–æ–≤–ª—é—î —Ç–∞–π–º–µ—Ä–∏ —Ñ—ñ–≥—É—Ä —É —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—è—Ö"""
        pieces_to_remove = []
        for piece_id, timer_info in list(self.nebula_piece_timers.items()):
            piece = self.board.get_piece_by_id(piece_id)
            if not piece or piece.color != self.current_player:
                continue
                
            timer_info["timer"] -= 1
            
            if timer_info["timer"] <= 0:
                piece_pos = self.board.find_piece_position(piece_id)
                
                nebula_name_str = ""
                nebula_coords_str = ""
                if piece_pos:
                    neb_name_raw = get_nebula_name(piece_pos[0], piece_pos[1])
                    if neb_name_raw:
                        nebula_name_str = get_nebula_emoji_name(neb_name_raw)
                    nebula_coords_str = f"({piece_pos[0]}, {piece_pos[1]})"

                piece_name = PIECE_NAMES_UA.get(piece.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
                message = f"üíÄ —Ñ—ñ–≥—É—Ä–∞ {piece_name} id({piece.id}) –∑–Ω–∏—â–µ–Ω–∞ –≤ —Ç—É–º–∞–Ω–æ—Å—Ç—ñ {nebula_name_str} {nebula_coords_str} –∑–∞ –±—Ä–∞–∫–æ–º —á–∞—Å—É."
                game_print(message)

                if piece_pos:
                    self.board.clear_square(piece_pos[0], piece_pos[1])
                pieces_to_remove.append(piece_id)

        for piece_id in pieces_to_remove:
            if piece_id in self.nebula_piece_timers:
                del self.nebula_piece_timers[piece_id]
    
    def add_paralysis(self, row: int, col: int, duration: int):
        """–î–æ–¥–∞—î –ø–∞—Ä–∞–ª—ñ—á –Ω–∞ —Ñ—ñ–≥—É—Ä—É"""
        self.paralyzed_pieces[(row, col)] = duration
    
    def get_current_player_name(self) -> str:
        return "–ë—ñ–ª—ñ" if self.current_player == PieceColor.WHITE else "–ß–æ—Ä–Ω—ñ"
    
    def clear_selection(self):
        self.selected_piece = None
        self.possible_moves = []
        self.possible_attacks = []
        self.possible_teleports = []
        # temple_swap_selection –ù–ï –æ—á–∏—â–∞—î—Ç—å—Å—è —Ç—É—Ç - –≤—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±–º—ñ–Ω—É
    
    def is_piece_selected(self) -> bool:
        return self.selected_piece is not None
    
    def get_selected_position(self) -> Optional[Tuple[int, int]]:
        return self.selected_piece
    
    def reset_game(self):
        """–°–∫–∏–¥–∞—î –≥—Ä—É –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É"""
        self.board = Board()
        self.current_player = PieceColor.WHITE
        self.turn_number = 1
        self.selected_piece = None
        self.possible_moves = []
        self.possible_attacks = []
        self.possible_teleports = []
        self.move_history = []
        self.captured_pieces = {"white": [], "black": []}
        self.paralyzed_pieces = {}
        self.paralysis_mode_data = None
        self.moon_double_move = None
        self.nebula_blocked = {
            "top_left": True,
            "top_right": True, 
            "bottom_left": True,
            "bottom_right": True
        }
        self.resurrected_pawns = {"white": 0, "black": 0}
        self.resurrection_available = {"white": 0, "black": 0}
        self.nebulas_activated = {"white": False, "black": False}
        self.nebula_piece_timers = {}
        self.recently_resurrected_pieces = set()
        
        self.eye_enhancement_used = {"white": False, "black": False}
        self.triumphant_eye_links = {}
        self.eye_enhancement_selection = None
        
        # –°–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –•—Ä–∞–º—É
        self.temple_swap_used = {
            "black_left": False,
            "black_right": False,
            "white_left": False,
            "white_right": False
        }
        self.temple_swap_selection = None
        
        # –°–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ú—ñ—Å—è—Ü—è
        self.moon_double_move_active = {"white": False, "black": False}
        self.moon_double_move_used = {"white": False, "black": False}
        self.moon_double_move_first_piece = None
        
        # –°–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –í—Å–∞–¥–Ω–∏–∫–∞
        self.hunted_souls = {
            "white": {PieceType.KNIGHT: False, PieceType.BISHOP: False, PieceType.RIDER: False},
            "black": {PieceType.KNIGHT: False, PieceType.BISHOP: False, PieceType.RIDER: False}
        }
        self.performed_resurrection = {"white": False, "black": False}
        self.soul_corners = []
        
        self._setup_initial_position()
        
        self.move_calculator.update_board(self.board)
        self.move_calculator.set_game_state(self)
        self.move_calculator.reset_pawn_back_moves()
    
    def save_game(self, filename: str):
        pass
    
    def load_game(self, filename: str):
        pass
    
    def undo_move(self):
        if not self.move_history:
            return False
        return False
    
    def get_game_info(self) -> dict:
        return {
            "current_player": self.get_current_player_name(),
            "move_count": len(self.move_history),
            "captured_white": len(self.captured_pieces["white"]),
            "captured_black": len(self.captured_pieces["black"]),
            "paralyzed_count": len(self.paralyzed_pieces)
        }
    
    def update_resurrection_availability(self, captured_color: PieceColor):
        """–û–Ω–æ–≤–ª—é—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è –¥–ª—è –≥—Ä–∞–≤—Ü—è"""
        color_name = "white" if captured_color == PieceColor.WHITE else "black"
        if self.resurrected_pawns[color_name] < 2:
            self.resurrection_available[color_name] += 1

    def can_resurrect_pawn(self, color: PieceColor) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–µ –≥—Ä–∞–≤–µ—Ü—å –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –ø—ñ—à–∞–∫–∞"""
        color_name = "white" if color == PieceColor.WHITE else "black"
        return (
            self.resurrection_available[color_name] > 0 and 
            self.resurrected_pawns[color_name] < 2
        )

    def resurrect_pawn(self, row: int, col: int, color: PieceColor) -> bool:
        """–í–æ—Å–∫—Ä–µ—à–∞—î –ø—ñ—à–∞–∫–∞ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –ø–æ–∑–∏—Ü—ñ—é"""
        color_name_ua = "–±—ñ–ª–∏–π" if color == PieceColor.WHITE else "—á–æ—Ä–Ω–∏–π"
        
        if not self.can_resurrect_pawn(color):
            return False

        color_key = "white" if color == PieceColor.WHITE else "black"
        self.resurrection_available[color_key] -= 1

        if not self.board.is_square_empty(row, col):
            self.resurrection_available[color_key] += 1
            return False
        
        if color == PieceColor.WHITE:
            base_id = 1050
            piece_id = base_id + self.resurrected_pawns["white"]
        else:
            base_id = 2050
            piece_id = base_id + self.resurrected_pawns["black"]
        
        pawn = Piece(PieceType.PAWN, color, piece_id)
        self.board.set_piece(row, col, pawn)
        
        self.recently_resurrected_pieces.add(piece_id)
        self.resurrected_pawns[color_key] += 1
        
        is_free_action = self.resurrected_pawns[color_key] == 1
        
        chess_position = coordinates_to_chess_notation(row, col)
        attempt = self.resurrected_pawns[color_key]
        
        if attempt == 1:
            action_detail = "(—Ö—ñ–¥ –Ω–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ, –∑–∞–±–æ—Ä–æ–Ω–∞ —Ä—É—Ö—É –ø–æ—Ç–æ—á–Ω–æ—ó —Ñ—ñ–≥—É—Ä–∏)"
        else:
            action_detail = "(—Ö—ñ–¥ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ)"
            
        game_print(f"‚ö∞Ô∏è –ì—Ä–∞–≤–µ—Ü—å {color_name_ua} –≤–æ—Å–∫—Ä–µ—Å–∏–≤ –ø—ñ—à–∞–∫–∞ ID {piece_id} –ø–æ–∑–∏—Ü—ñ—î—é {chess_position} ({int(row)}, {int(col)}) —Å–ø—Ä–æ–± {attempt}/2 {action_detail}")
        # –í–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –û–î–†–ê–ó–£ –≤ –ø–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥
        if self.resurrected_pawns[color_key] == 2:
            self.activate_nebulas(color)
            return False
        
        return is_free_action
    
    def resurrect_soul(self, row: int, col: int, piece_type: PieceType, color: PieceColor):
        """–í–æ—Å–∫—Ä–µ—à–∞—î –¥—É—à—É (–∫—ñ–Ω—å, –æ—Ñ—ñ—Ü–µ—Ä, –≤—Å–∞–¥–Ω–∏–∫) —á–µ—Ä–µ–∑ –í—Å–∞–¥–Ω–∏–∫–∞"""
        color_key = "white" if color == PieceColor.WHITE else "black"
        color_name_ua = "–±—ñ–ª–∏–π" if color == PieceColor.WHITE else "—á–æ—Ä–Ω–∏–π"
        piece_name = PIECE_NAMES_UA.get(piece_type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ ID –¥–ª—è –≤–æ—Å–∫—Ä–µ—à–µ–Ω–æ—ó —Ñ—ñ–≥—É—Ä–∏
        if color == PieceColor.WHITE:
            base_id = {
                PieceType.KNIGHT: 1100,
                PieceType.BISHOP: 1110,
                PieceType.RIDER: 1120
            }[piece_type]
        else:
            base_id = {
                PieceType.KNIGHT: 2100,
                PieceType.BISHOP: 2110,
                PieceType.RIDER: 2120
            }[piece_type]
        
        # –†–∞—Ö—É—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –≤–∂–µ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–æ —Ü—å–æ–≥–æ —Ç–∏–ø—É
        existing_count = len([p for p in self.board.get_all_pieces_of_type(piece_type, color)])
        piece_id = base_id + existing_count
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–≥—É—Ä—É
        resurrected_piece = Piece(piece_type, color, piece_id)
        self.board.set_piece(row, col, resurrected_piece)
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ
        self.performed_resurrection[color_key] = True
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ç–æ—á–∫–∏ (–≤—Å—ñ –∑–Ω–∏–∫–Ω—É—Ç—å)
        self._update_soul_corners()
        
        chess_position = coordinates_to_chess_notation(row, col)
        game_print(f"üëª –ì—Ä–∞–≤–µ—Ü—å {color_name_ua} –≤–æ—Å–∫—Ä–µ—Å–∏–≤ {piece_name} ID {piece_id} –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó {chess_position} ({row}, {col}) —á–µ—Ä–µ–∑ –í—Å–∞–¥–Ω–∏–∫–∞!")
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ —Ö—ñ–¥
        self.switch_player()

    def activate_nebulas(self, color: PieceColor):
        """–ê–∫—Ç–∏–≤—É—î —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—ñ –¥–ª—è –≥—Ä–∞–≤—Ü—è –ø—ñ—Å–ª—è –¥—Ä—É–≥–æ–≥–æ –≤–æ—Å–∫—Ä–µ—Å—ñ–Ω–Ω—è"""
        color_name = "–±—ñ–ª–∏–π" if color == PieceColor.WHITE else "—á–æ—Ä–Ω–∏–π"
        color_key = "white" if color == PieceColor.WHITE else "black"
        self.nebulas_activated[color_key] = True
        
        if color == PieceColor.WHITE:
            self.nebula_blocked["bottom_left"] = False
            self.nebula_blocked["bottom_right"] = False
            game_print(f"üåÄ –¢—É–º–∞–Ω–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ –¥–ª—è –≥—Ä–∞–≤—Ü—è {color_name} - –≤—ñ–¥–∫—Ä–∏—Ç–æ (21,0) —Ç–∞ (21,19)")
        else:
            self.nebula_blocked["top_left"] = False
            self.nebula_blocked["top_right"] = False
            game_print(f"üåÄ –¢—É–º–∞–Ω–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ –¥–ª—è –≥—Ä–∞–≤—Ü—è {color_name} - –≤—ñ–¥–∫—Ä–∏—Ç–æ (0,0) —Ç–∞ (0,19)")
    def enter_nebula(self, piece_id: int, nebula_pos: Tuple[int, int]):
        self.nebula_piece_timers[piece_id] = {
            "timer": 5,
            "nebula_pos": nebula_pos
        }
    def teleport_piece(self, piece_id: int, from_nebula: Tuple[int, int], to_nebula: Tuple[int, int]) -> bool:
        if piece_id not in self.nebula_piece_timers:
            return False
        
        penalty = 0
        if from_nebula[0] != to_nebula[0]:
            penalty = 1
        
        timer_info = self.nebula_piece_timers[piece_id]
        timer_info["timer"] -= penalty
        timer_info["nebula_pos"] = to_nebula
        
        # –í–ò–î–ê–õ–ï–ù–û –¥—É–±–ª—é–≤–∞–Ω–Ω—è: –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü—ñ—ó —Ç–µ–ø–µ—Ä —É _handle_teleport_move()

        if timer_info["timer"] <= 0:
            piece_pos = self.board.find_piece_position(piece_id)
            piece = self.board.get_piece_at(piece_pos[0], piece_pos[1]) if piece_pos else None
            
            from_nebula_name = get_nebula_emoji_name(get_nebula_name(from_nebula[0], from_nebula[1]))
            to_nebula_name = get_nebula_emoji_name(get_nebula_name(to_nebula[0], to_nebula[1]))

            if piece_pos:
                self.board.clear_square(piece_pos[0], piece_pos[1])

            if piece:
                piece_name = PIECE_NAMES_UA.get(piece.type, "–Ω–µ–≤—ñ–¥–æ–º–∞")
                message = f"üíÄüí´ —Ñ—ñ–≥—É—Ä–∞ {piece_name} id({piece.id}) –∑–∞–≥–∏–Ω—É–ª–∞ –≤ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü—ñ—ó –∑ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—ñ {from_nebula_name} ({from_nebula[0]}, {from_nebula[1]}) –≤ {to_nebula_name} ({to_nebula[0]}, {to_nebula[1]}), –∑–Ω–∏—â–µ–Ω–∞ –≤ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü—ñ—ó –∑–∞ —à—Ç—Ä–∞—Ñ–æ–º."
                game_print(message)
            else:
                message = f"üíÄüí´ —Ñ—ñ–≥—É—Ä–∞ –∑ id({piece_id}) –∑–Ω–∏—â–µ–Ω–∞ –≤ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü—ñ—ó –∑–∞ —à—Ç—Ä–∞—Ñ–æ–º."
                game_print(message)

            if piece_id in self.nebula_piece_timers:
                del self.nebula_piece_timers[piece_id]
            return False
        
        return True

    def _can_aristocrat_exchange_with(self, from_row: int, from_col: int, to_row: int, to_col: int) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–±–º—ñ–Ω—É –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞ –∑ —Ñ—ñ–≥—É—Ä–æ—é –Ω–∞ —Ü—ñ–ª—å–æ–≤—ñ–π –ø–æ–∑–∏—Ü—ñ—ó.
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ MoveCalculator._can_aristocrat_exchange
        """
        aristocrat = self.board.get_piece_at(from_row, from_col)
        target_piece = self.board.get_piece_at(to_row, to_col)
        
        if not aristocrat or aristocrat.type != PieceType.ARISTOCRAT:
            return False, "–ù–µ –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç"
        
        if not target_piece or target_piece.is_empty():
            return False, "–¶—ñ–ª—å–æ–≤–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è"
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ –∑ MoveCalculator –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        is_aristocrat_in_nebula = is_nebula_coordinates(from_row, from_col)
        can_exchange = self.move_calculator._can_aristocrat_exchange(
            aristocrat, from_row, from_col, to_row, to_col, is_aristocrat_in_nebula
        )
        
        if not can_exchange:
            return False, "–û–±–º—ñ–Ω –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª–∞–º–∏"
        
        return True, "OK"
    
    def _check_aristocrat_death_for_moon_activation(self, captured_aristocrat: Piece):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–Ω–∏—â–µ–Ω–æ –æ–±–æ—Ö –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç—ñ–≤ –æ–¥–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É.
        –Ø–∫—â–æ —Ç–∞–∫ - –∞–∫—Ç–∏–≤—É—î –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥ –¥–ª—è –ú—ñ—Å—è—Ü—ñ–≤ —Ü—å–æ–≥–æ –∫–æ–ª—å–æ—Ä—É (–Ω–∞–∑–∞–≤–∂–¥–∏).
        """
        color_key = "white" if captured_aristocrat.color == PieceColor.WHITE else "black"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥ (—â–æ–± –Ω–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–≤—ñ—á—ñ)
        if self.moon_double_move_active[color_key]:
            return
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∂–∏–≤–∏—Ö –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç—ñ–≤ —Ü—å–æ–≥–æ –∫–æ–ª—å–æ—Ä—É
        alive_aristocrats = self.board.get_all_pieces_of_type(PieceType.ARISTOCRAT, captured_aristocrat.color)
        
        # –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏ –∑–Ω–∏—â–µ–Ω—ñ - –∞–∫—Ç–∏–≤—É—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥ –Ω–∞–∑–∞–≤–∂–¥–∏
        if len(alive_aristocrats) == 0:
            self.moon_double_move_active[color_key] = True
            color_name = "–±—ñ–ª–∏—Ö" if captured_aristocrat.color == PieceColor.WHITE else "—á–æ—Ä–Ω–∏—Ö"
            game_print(f"üåô –ê–ö–¢–ò–í–û–í–ê–ù–û: –ü–æ–¥–≤—ñ–π–Ω–∏–π —Ö—ñ–¥ –ú—ñ—Å—è—Ü—ñ–≤ –¥–ª—è {color_name}! –û–±–∏–¥–≤–∞ –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏ –∑–Ω–∏—â–µ–Ω—ñ.")
            game_print(f"   üì¢ –ö–æ–∂–µ–Ω —Ö—ñ–¥ {color_name} –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–∏–º (–º—ñ—Å—è—Ü—å ‚Üí –º—ñ—Å—è—Ü—å) –¥–æ –∫—ñ–Ω—Ü—è –≥—Ä–∏!")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ö–æ–¥—É
    def execute_aristocrat_exchange(self, from_row: int, from_col: int, to_row: int, to_col: int) -> bool:
        """
        –í–∏–∫–æ–Ω—É—î –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–∏–π –æ–±–º—ñ–Ω –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞ –∑ —ñ–Ω—à–æ—é —Ñ—ñ–≥—É—Ä–æ—é.
        –û–±–∏–¥–≤—ñ —Ñ—ñ–≥—É—Ä–∏ –º–∏—Ç—Ç—î–≤–æ –º—ñ–Ω—è—é—Ç—å—Å—è –º—ñ—Å—Ü—è–º–∏.
        """
        aristocrat = self.board.get_piece_at(from_row, from_col)
        target_piece = self.board.get_piece_at(to_row, to_col)
        
        if not aristocrat or not target_piece:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–±–º—ñ–Ω—É
        can_exchange, reason = self._can_aristocrat_exchange_with(from_row, from_col, to_row, to_col)
        
        if not can_exchange:
            game_print(f"‚ö†Ô∏è –û–±–º—ñ–Ω –Ω–µ–º–æ–∂–ª–∏–≤–∏–π: {reason}")
            return False
        
        # –ö–†–ò–¢–ò–ß–ù–û: –°–ø—Ä–∞–≤–∂–Ω—ñ–π –æ–±–º—ñ–Ω –º—ñ—Å—Ü—è–º–∏ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±–∏–¥–≤—ñ —Ñ—ñ–≥—É—Ä–∏!
        # 1. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ø—ñ—ó –æ–±–æ—Ö —Ñ—ñ–≥—É—Ä
        aristocrat_copy = Piece(aristocrat.type, aristocrat.color, aristocrat.id)
        target_copy = Piece(target_piece.type, target_piece.color, target_piece.id)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω is_enhanced —è–∫—â–æ —î
        if hasattr(aristocrat, 'is_enhanced'):
            aristocrat_copy.is_enhanced = aristocrat.is_enhanced
        if hasattr(target_piece, 'is_enhanced'):
            target_copy.is_enhanced = target_piece.is_enhanced
        
        # 2. –û—á–∏—â–∞—î–º–æ –æ–±–∏–¥–≤—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
        self.board.clear_square(from_row, from_col)
        self.board.clear_square(to_row, to_col)
        
        # 3. –°—Ç–∞–≤–∏–º–æ —Ñ—ñ–≥—É—Ä–∏ –Ω–∞ –Ω–æ–≤—ñ –º—ñ—Å—Ü—è (–û–ë–ú–Ü–ù!)
        self.board.set_piece(from_row, from_col, target_copy)      # –¶—ñ–ª—å –Ω–∞ –º—ñ—Å—Ü–µ –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞
        self.board.set_piece(to_row, to_col, aristocrat_copy)      # –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç –Ω–∞ –º—ñ—Å—Ü–µ —Ü—ñ–ª—ñ
        
        # ‚ïê‚ïê‚ïê –ú–ï–•–ê–ù–Ü–ö–ê –ï–õ–ï–ö–¢–†–ò–ß–ù–û–ì–û –ü–ê–†–ê–õ–Ü–ß–£ –î–õ–Ø –ê–†–ò–°–¢–û–ö–†–ê–¢–ê ‚ïê‚ïê‚ïê
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–∞–ª—ñ—á –ü–ï–†–ï–î –ª–æ–≥—É–≤–∞–Ω–Ω—è–º, –∞–ª–µ –ü–Ü–°–õ–Ø –æ–±–º—ñ–Ω—É
        lightning_shock = (target_piece.type == PieceType.LIGHTNING and 
                          target_piece.color != aristocrat.color)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        aristocrat_color = get_color_name_ua_with_gender(aristocrat.color, aristocrat.type)
        target_color = get_color_name_ua_with_gender(target_piece.color, target_piece.type)
        aristocrat_name = PIECE_NAMES_UA.get(aristocrat.type, "–∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç")
        target_name = PIECE_NAMES_UA.get(target_piece.type, "—Ñ—ñ–≥—É—Ä–∞")
        
        from_notation = coordinates_to_chess_notation(from_row, from_col)
        to_notation = coordinates_to_chess_notation(to_row, to_col)
        
        game_print(f"üîÑ {aristocrat_color} {aristocrat_name} id({aristocrat.id}) –æ–±–º—ñ–Ω—è–≤—Å—è –∑ {target_color} {target_name} id({target_piece.id})")
        game_print(f"   {from_notation} ({from_row}, {from_col}) ‚áÑ {to_notation} ({to_row}, {to_col})")
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞—Ä–∞–ª—ñ—á –ü–Ü–°–õ–Ø –æ–±–º—ñ–Ω—É —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        if lightning_shock:
            # –ü–∞—Ä–∞–ª—ñ–∑—É—î–º–æ –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞ (—è–∫–∏–π —Ç–µ–ø–µ—Ä –Ω–∞ to_row, to_col)
            self.paralyzed_pieces[(to_row, to_col)] = {
                'duration': 2,  # duration=2 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É 1 –ø–æ–≤–Ω–æ–≥–æ —Ö–æ–¥—É
                'piece_id': aristocrat.id,
                'color': aristocrat.color
            }
            game_print(f"‚ö°üí• {aristocrat_color} {aristocrat_name} id({aristocrat.id}) –æ—Ç—Ä–∏–º–∞–≤ –µ–ª–µ–∫—Ç—Ä–∏—á–Ω–∏–π —à–æ–∫ –≤—ñ–¥ –ë–ª–∏—Å–∫–∞–≤–∫–∏!")
            game_print(f"   ‚õî {aristocrat_name} –Ω–∞ {to_notation} ({to_row}, {to_col}) –ø–∞—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–∞ 1 —Ö—ñ–¥!")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–ª—ñ–∑–∞—Ü—ñ—ó
        # –û—á–∏—â–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥—É
        self.clear_selection()
        self.switch_player()
        
        return True

    def get_temple_id(self, row: int, col: int) -> Optional[str]:
        """
        –í–∏–∑–Ω–∞—á–∞—î ID —Ö—Ä–∞–º—É –∑–∞ ID —Ñ—ñ–≥—É—Ä–∏ (–Ω–µ –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é, –±–æ —Ö—Ä–∞–º –º–æ–∂–µ —Ä—É—Ö–∞—Ç–∏—Å—è).
        –ü–æ–≤–µ—Ä—Ç–∞—î: 'black_left', 'black_right', 'white_left', 'white_right' –∞–±–æ None
        """
        temple = self.board.get_piece_at(row, col)
        if not temple or temple.type != PieceType.TEMPLE:
            return None
        
        # –ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è ID —Ñ—ñ–≥—É—Ä–∏ –∑ –∫–ª—é—á–µ–º —Ö—Ä–∞–º—É
        temple_id_map = {
            2000: "black_left",    # –ß–æ—Ä–Ω–∏–π –ª—ñ–≤–∏–π —Ö—Ä–∞–º (–ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è A20)
            2017: "black_right",   # –ß–æ—Ä–Ω–∏–π –ø—Ä–∞–≤–∏–π —Ö—Ä–∞–º (–ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è R20)
            1030: "white_left",    # –ë—ñ–ª–∏–π –ª—ñ–≤–∏–π —Ö—Ä–∞–º (–ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è A1)
            1047: "white_right"    # –ë—ñ–ª–∏–π –ø—Ä–∞–≤–∏–π —Ö—Ä–∞–º (–ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è R1)
        }
        
        return temple_id_map.get(temple.id)
    
    def get_temple_swap_targets(self, temple_row: int, temple_col: int) -> List[Tuple[int, int]]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü—ñ–π —Å–æ—é–∑–Ω–∏—Ö —Ñ—ñ–≥—É—Ä, –∑ —è–∫–∏–º–∏ —Ö—Ä–∞–º –º–æ–∂–µ –æ–±–º—ñ–Ω—è—Ç–∏—Å—è.
        """
        temple = self.board.get_piece_at(temple_row, temple_col)
        if not temple or temple.type != PieceType.TEMPLE:
            return []
        
        temple_id = self.get_temple_id(temple_row, temple_col)
        if not temple_id or self.temple_swap_used.get(temple_id, False):
            return []
        
        swap_targets = []
        all_pieces = self.board.get_all_pieces_of_color(temple.color)
        
        for target_row, target_col in all_pieces:
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∞–º —Ö—Ä–∞–º
            if (target_row, target_col) == (temple_row, temple_col):
                continue
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–±–º—ñ–Ω—É
            can_swap, _ = self.can_temple_swap_with(temple_row, temple_col, target_row, target_col)
            if can_swap:
                swap_targets.append((target_row, target_col))
        
        return swap_targets
    
    def can_temple_swap_with(self, temple_row: int, temple_col: int, 
                             target_row: int, target_col: int) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–µ —Ö—Ä–∞–º –æ–±–º—ñ–Ω—è—Ç–∏—Å—è –∑ —Ñ—ñ–≥—É—Ä–æ—é –Ω–∞ target –ø–æ–∑–∏—Ü—ñ—ó.
        –ü–æ–≤–µ—Ä—Ç–∞—î: (–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–±–º—ñ–Ω—É, –ø—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥–º–æ–≤–∏)
        """
        temple = self.board.get_piece_at(temple_row, temple_col)
        target = self.board.get_piece_at(target_row, target_col)
        
        if not temple or not target:
            return False, "–ù–µ–º–∞—î —Ñ—ñ–≥—É—Ä"
        
        if temple.color != target.color:
            return False, "–ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±–º—ñ–Ω—è—Ç–∏—Å—è –∑ –≤–æ—Ä–æ–∂–æ—é —Ñ—ñ–≥—É—Ä–æ—é"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±–º—ñ–Ω—É
        temple_id = self.get_temple_id(temple_row, temple_col)
        if not temple_id:
            return False, "–•—Ä–∞–º –Ω–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ñ–π –ø–æ–∑–∏—Ü—ñ—ó"
        
        if self.temple_swap_used.get(temple_id, False):
            return False, "–•—Ä–∞–º –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ —Å–≤—ñ–π –æ–±–º—ñ–Ω"
        
        temple_in_nebula = is_nebula_coordinates(temple_row, temple_col)
        target_in_nebula = is_nebula_coordinates(target_row, target_col)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –ö–æ—Ä–æ–ª—è
        if target.type == PieceType.KING:
            # –ö–æ—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—ñ
            if temple_in_nebula:
                return False, "–ö–æ—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—ñ"
            
            # –ö–æ—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ —Å–æ—é–∑–Ω—ñ–π —ñ–º—É–Ω–Ω—ñ–π –∑–æ–Ω—ñ
            in_ally_zone, _ = self.move_calculator._is_in_any_shield_zone(temple_row, temple_col, temple.color)
            if in_ally_zone:
                return False, "–ö–æ—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ —Å–æ—é–∑–Ω—ñ–π —ñ–º—É–Ω–Ω—ñ–π –∑–æ–Ω—ñ"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –©–∏—Ç–∞
        if target.type == PieceType.SHIELD:
            # –©–∏—Ç –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—ñ
            if temple_in_nebula:
                return False, "–©–∏—Ç –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç—ñ"
            
            # –•—Ä–∞–º –≤ –∑–æ–Ω—ñ –¥—ñ—ó —Å–æ—é–∑–Ω–æ–≥–æ –©–∏—Ç–∞ –Ω–µ –º–æ–∂–µ –º—ñ–Ω—è—Ç–∏—Å—è –∑ —ñ–Ω—à–∏–º–∏ –©–∏—Ç–∞–º–∏
            # (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É)
            temple_in_ally_shield, _ = self.move_calculator._is_in_any_shield_zone(temple_row, temple_col, temple.color)
            if temple_in_ally_shield:
                return False, "–•—Ä–∞–º –≤ –∑–æ–Ω—ñ –¥—ñ—ó –©–∏—Ç–∞ –Ω–µ –º–æ–∂–µ –º—ñ–Ω—è—Ç–∏—Å—è –∑ —ñ–Ω—à–∏–º–∏ –©–∏—Ç–∞–º–∏"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –§—É—Ä—ñ—ó
        if target.type == PieceType.FURY:
            # –§—É—Ä—ñ—è –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ —Å–æ—é–∑–Ω—ñ–π —ñ–º—É–Ω–Ω—ñ–π –∑–æ–Ω—ñ
            in_ally_zone, _ = self.move_calculator._is_in_any_shield_zone(temple_row, temple_col, temple.color)
            if in_ally_zone:
                return False, "–§—É—Ä—ñ—è –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ —Å–æ—é–∑–Ω—ñ–π —ñ–º—É–Ω–Ω—ñ–π –∑–æ–Ω—ñ"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –•—Ä–∞–º—É (–∫—É–¥–∏ –≤—ñ–Ω –ø—ñ–¥–µ)
        # –•—Ä–∞–º –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ –≤–æ—Ä–æ–∂—ñ–π —ñ–º—É–Ω–Ω—ñ–π –∑–æ–Ω—ñ
        enemy_color = PieceColor.BLACK if temple.color == PieceColor.WHITE else PieceColor.WHITE
        in_enemy_zone, _ = self.move_calculator._is_in_any_shield_zone(target_row, target_col, enemy_color)
        if in_enemy_zone:
            # –Ø–∫—â–æ —Ü—ñ–ª—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≤–æ—Ä–æ–∂—ñ–π –∑–æ–Ω—ñ —ñ –º–æ–∂–µ —Ç–∞–º –±—É—Ç–∏ (–ö–æ—Ä–æ–ª—å, –û–∫–æ, –§—É—Ä—ñ—è, –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç)
            # –∞–ª–µ –•—Ä–∞–º —Ç—É–¥–∏ –Ω–µ –º–æ–∂–µ, —Ç–æ –æ–±–º—ñ–Ω –Ω–µ–º–æ–∂–ª–∏–≤–∏–π
            if target.type not in [PieceType.KING, PieceType.EYE, PieceType.FURY, PieceType.ARISTOCRAT]:
                return False, "–•—Ä–∞–º –Ω–µ –º–æ–∂–µ –æ–ø–∏–Ω–∏—Ç–∏—Å—è –≤ –≤–æ—Ä–æ–∂—ñ–π —ñ–º—É–Ω–Ω—ñ–π –∑–æ–Ω—ñ"
            else:
                return False, "–•—Ä–∞–º –Ω–µ –º–æ–∂–µ –æ–±–º—ñ–Ω—è—Ç–∏—Å—è –∑ —Ñ—ñ–≥—É—Ä–æ—é –≤ –≤–æ—Ä–æ–∂—ñ–π —ñ–º—É–Ω–Ω—ñ–π –∑–æ–Ω—ñ"
        
        return True, ""
    
    def execute_temple_swap(self, temple_row: int, temple_col: int, 
                           target_row: int, target_col: int) -> bool:
        """
        –í–∏–∫–æ–Ω—É—î —Å–≤—è—â–µ–Ω–Ω–∏–π –æ–±–º—ñ–Ω –•—Ä–∞–º—É –∑ —Å–æ—é–∑–Ω–æ—é —Ñ—ñ–≥—É—Ä–æ—é.
        –û–±–∏–¥–≤—ñ —Ñ—ñ–≥—É—Ä–∏ –º–∏—Ç—Ç—î–≤–æ –º—ñ–Ω—è—é—Ç—å—Å—è –º—ñ—Å—Ü—è–º–∏.
        """
        temple = self.board.get_piece_at(temple_row, temple_col)
        target = self.board.get_piece_at(target_row, target_col)
        
        if not temple or not target:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–±–º—ñ–Ω—É
        can_swap, reason = self.can_temple_swap_with(temple_row, temple_col, target_row, target_col)
        
        if not can_swap:
            game_print(f"‚ö†Ô∏è –û–±–º—ñ–Ω –Ω–µ–º–æ–∂–ª–∏–≤–∏–π: {reason}")
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID —Ö—Ä–∞–º—É
        temple_id = self.get_temple_id(temple_row, temple_col)
        if not temple_id:
            return False
        
        # –ö–†–ò–¢–ò–ß–ù–û: –°–ø—Ä–∞–≤–∂–Ω—ñ–π –æ–±–º—ñ–Ω –º—ñ—Å—Ü—è–º–∏ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±–∏–¥–≤—ñ —Ñ—ñ–≥—É—Ä–∏!
        # 1. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ø—ñ—ó –æ–±–æ—Ö —Ñ—ñ–≥—É—Ä
        temple_copy = Piece(temple.type, temple.color, temple.id)
        target_copy = Piece(target.type, target.color, target.id)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω is_enhanced —è–∫—â–æ —î
        if hasattr(temple, 'is_enhanced'):
            temple_copy.is_enhanced = temple.is_enhanced
        if hasattr(target, 'is_enhanced'):
            target_copy.is_enhanced = target.is_enhanced
        
        # 2. –û—á–∏—â–∞—î–º–æ –æ–±–∏–¥–≤—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
        self.board.clear_square(temple_row, temple_col)
        self.board.clear_square(target_row, target_col)
        
        # 3. –°—Ç–∞–≤–∏–º–æ —Ñ—ñ–≥—É—Ä–∏ –Ω–∞ –Ω–æ–≤—ñ –º—ñ—Å—Ü—è (–û–ë–ú–Ü–ù!)
        self.board.set_piece(temple_row, temple_col, target_copy)  # –¶—ñ–ª—å –Ω–∞ –º—ñ—Å—Ü–µ –•—Ä–∞–º—É
        self.board.set_piece(target_row, target_col, temple_copy)  # –•—Ä–∞–º –Ω–∞ –º—ñ—Å—Ü–µ —Ü—ñ–ª—ñ
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        temple_color = get_color_name_ua_with_gender(temple.color, temple.type)
        target_color = get_color_name_ua_with_gender(target.color, target.type)
        temple_name = PIECE_NAMES_UA.get(temple.type, "—Ö—Ä–∞–º")
        target_name = PIECE_NAMES_UA.get(target.type, "—Ñ—ñ–≥—É—Ä–∞")
        
        temple_notation = coordinates_to_chess_notation(temple_row, temple_col)
        target_notation = coordinates_to_chess_notation(target_row, target_col)
        
        game_print(f"‚õ™ {temple_color} {temple_name} id({temple.id}) –∑–¥—ñ–π—Å–Ω–∏–≤ —Å–≤—è—â–µ–Ω–Ω–∏–π –æ–±–º—ñ–Ω –∑ {target_color} {target_name} id({target.id})")
        game_print(f"   {temple_notation} ({temple_row}, {temple_col}) ‚áÑ {target_notation} ({target_row}, {target_col})")
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —Ö—Ä–∞–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ —Å–≤—ñ–π –æ–±–º—ñ–Ω
        self.temple_swap_used[temple_id] = True
        game_print(f"   ‚úùÔ∏è –•—Ä–∞–º id({temple.id}) –Ω–∞ {temple_notation} ({temple_row}, {temple_col}) –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ —Å–≤—ñ–π —Å–≤—è—â–µ–Ω–Ω–∏–π –æ–±–º—ñ–Ω (–±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)")
        # –û—á–∏—â–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –•—Ä–∞–º—É —Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥—É
        self.temple_swap_selection = None  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –≤–∏–±–æ—Ä—É –æ–±–º—ñ–Ω—É
        self.clear_selection()
        self.switch_player()
        
        return True


